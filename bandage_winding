#include <string>
#include <vector>

using namespace std;

int solution(vector<int> bandage, int health, vector<vector<int>> attacks) {
    // int time=bandage[0]; // 회복 시전 시간
    // int heal=bandage[1]; // 초당 회복량
    // int heal_plus=bandage[2]; // 추가 회복량
    
    // attacks[0][0] : 첫 공격이 시작된 시점
    // attacks[attacks.size()-1][0] : 마지막 공격이 들어온 시점
    // 처음에 주어진 health가 최대 체력이므로,
    // 공격이 들어오기 전까지는 health에 변동이 없으므로
    // 처음으로 공격이 들어온 시점~마지막 공격이 들어온 시점
    // 사이를 연산하면 된다
    
    int answer=health-attacks[0][1]; //첫 공격으로 인한 체력 감소 (확정)
    int a=attacks[attacks.size()-1][0];
    // 첫 체력 감소(현재) 이후 ~ 두번째 공격(다음) 사이의 초를 연산,
    // attacks[i-1][0]+1 ~ attacks[i][0]
    // 1. 만약 해당 시간이 회복 주기보다 길거나 같다면
    // 현재 health+
    // 초당 회복량*시전시간 + 추가 회복량
    // + 초당 회복량*(다음 공격 시점-현재 공격)
    // 2. 만약 해당 시간이 회복 주기보다 짧다면
    // 현재 health+
    // 초당 회복량*(다음 공격 시점-현재 공격)
    
    // 위 사이클은 현재가 공격 타이밍이 아닐때만 진행한다
    
    for(int i=1;i<a;i++){
        int time2=attacks[i][0]-attacks[i-1][0]-1;
        int j=bandage[1]*bandage[0];
        int k=bandage[1]*time2;
        if(time2>0){
            if(time2>=bandage[0]){ // 1번
                answer=answer+j+bandage[2]+k;
            }
            else{ //2번
                answer=answer+k;
            }        
            if(answer>health){ // 체력이 상한을 넘어간다면 기준치로 고정
                answer=health;
            }
        }
        answer=answer-attacks[i][1];
        if(answer<=0){ // 만약 체력이 0이 됐다면 for문 즉시 종료
            break;
        }
    }
    if(answer<=0){ // 체력이 0일 경우 -1을 반환하도록 함
        answer=-1;
    }   
    return answer;
}
